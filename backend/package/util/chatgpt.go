package util

import (
	"encoding/json"
	"io"
	"net/http"
	"newclip/database"
	"newclip/model"
	"strings"

	"go.uber.org/zap"
)

const (
	// chatgpt
	ChatGPTAvatar = "http://s2a5yl4lg.hn-bkt.clouddn.com/2022chatgpt.png"
	ChatGPTName   = "ChatGPT"
	ChatGPTID     = 1
)

type ChatGPTReply struct {
	ID               string `json:"id"`
	Object           string `json:"object"`
	Created          int    `json:"created"`
	Result           string `json:"result"`
	IsTruncated      bool   `json:"is_truncated"`
	NeedClearHistory bool   `json:"need_clear_history"`
	Usage            struct {
		PromptTokens     int `json:"prompt_tokens"`
		CompletionTokens int `json:"completion_tokens"`
		TotalTokens      int `json:"total_tokens"`
	} `json:"usage"`
}

type AutoGenerated struct {
	RefreshToken  string `json:"refresh_token"`
	ExpiresIn     int    `json:"expires_in"`
	SessionKey    string `json:"session_key"`
	AccessToken   string `json:"access_token"`
	Scope         string `json:"scope"`
	SessionSecret string `json:"session_secret"`
}

func SendToChatGPT(userID uint64, content string) error {
	// 先将消息写入数据库
	err := database.CreateMessage(userID, ChatGPTID, content)
	if err != nil {
		return err
	}
	go func() {
		url := "https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&client_id=oSA9nO5weiiGmbulrh6RDGbE&client_secret=C4NB0LYFrQIiOXYTMzD6LZb0VWqxzafc"
		payload := strings.NewReader("{\"messages\":[{\"role\":\"user\",\"content\":\""  + "\"}]}")
		req, _ := http.NewRequest("POST", url, payload)

		req.Header.Add("Content-type", "application/json")
		req.Header.Add("Accept", "application/json")

		res, err := http.DefaultClient.Do(req)
		if err != nil {
			zap.L().Error(err.Error())
			return
		}
		defer res.Body.Close()
		body, _ := io.ReadAll(res.Body)
		var token AutoGenerated
		var replyJSON ChatGPTReply
		err = json.Unmarshal(body, &token)
		if err != nil {
			zap.L().Error(err.Error())
		}
		if token.AccessToken == "" {
			zap.L().Error("token获取失败")
			return
		}
		url = "https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/qianfan_chinese_llama_2_7b?access_token=" + token.AccessToken
		payload = strings.NewReader("{\"messages\":[{\"role\":\"user\",\"content\":\"" + content + "\"}]}")
		req, _ = http.NewRequest("POST", url, payload)

		req.Header.Add("Content-type", "application/json")

		res, err = http.DefaultClient.Do(req)
		if err != nil {
			zap.L().Error(err.Error())
			return
		}
		defer res.Body.Close()
		body, _ = io.ReadAll(res.Body)
		err = json.Unmarshal(body, &replyJSON)
		if err != nil {
			zap.L().Error(err.Error())
		}
		if replyJSON.Result == "" {
			zap.L().Error("token获取失败")
			return
		}

		err = database.CreateMessage(ChatGPTID, userID, replyJSON.Result)
		if err != nil {
			zap.L().Error(err.Error())
		}
	}()
	return nil
}

// 将chatgpt注册为用户
func RegisterChatGPT() {
	user := &model.User{
		ID:       ChatGPTID,
		Username: ChatGPTName,
		Avatar:   ChatGPTAvatar,
	}
	_, err := database.CreateUser(user)
	if err != nil {
		zap.Error(err)
	}
}
